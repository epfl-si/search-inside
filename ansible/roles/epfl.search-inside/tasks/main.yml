- name: Elastic - Image Stream
  when: >-
    openshift_namespace == "wwp-test"
  openshift_imagestream:
    state: latest
    metadata:
      namespace: "{{ openshift_namespace }}"
      name: search-inside-elastic
    git:
      repository: "{{ searchinside_git_uri }}"
      path: docker_elasticsearch
  register: _openshift_image_search_inside_elastic

- name: Elastic - Rebuild image
  when:
    - >
      ( (_openshift_image_search_inside_elastic | default({})) is changed )
      or
      "elastic.rebuild" in ansible_run_tags
    - >-
      openshift_namespace == "wwp-test"
  shell: "oc -n {{ openshift_namespace }} start-build --wait search-inside-elastic"
  delegate_to: localhost
  tags:
    - elastic.rebuild

- name: Kibana - Image Stream
  when: >-
    openshift_namespace == "wwp-test"
  openshift_imagestream:
    metadata:
      name: search-inside-kibana
      namespace: "{{ openshift_namespace }}"
    tag: 8.2.0
    from: docker.elastic.co/kibana/kibana:8.2.0
  register: _openshift_image_search_inside_kibana

- name: Kibana - Rebuild image
  when:
    - >
      ( (_openshift_image_search_inside_kibana | default({})) is changed )
      or
      "kibana.rebuild" in ansible_run_tags
    - >-
      openshift_namespace == "wwp-test"
  shell: "oc -n {{ openshift_namespace }} start-build --wait search-inside-kibana"
  delegate_to: localhost
  tags:
    - kibana.rebuild

- name: Elastic - Deployment Config
  openshift:
    apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: search-inside-elastic
      namespace: "{{ openshift_namespace }}"
    spec:
      replicas: 1
      selector:
        deployment-config.name: search-inside-elastic
      template:
        metadata:
          creationTimestamp: null
          labels:
            deployment-config.name: search-inside-elastic
        spec:
          containers:
            - env:
              - name: 'ES_JAVA_OPTS'
                value: '-Xms4096m -Xmx4096m'
              - name: 'xpack.security.enabled'
                value: 'false'
              - name: 'discovery.type'
                value: 'single-node'
              image: 'docker-registry.default.svc:5000/{{ openshift_namespace }}/search-inside-elastic:latest'
              imagePullPolicy: Always
              name: search-inside-elastic
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - search-inside-elastic
            from:
              kind: ImageStreamTag
              name: 'search-inside-elastic:latest'
              namespace: "{{ openshift_namespace }}"

- name: Elastic - Service
  openshift:
    state: latest
    apiVersion: v1
    kind: Service
    metadata:
      name: "{{ searchinside_elastic_servicename }}"
      namespace: "{{ openshift_namespace }}"
    spec:
      type: ClusterIP
      ports:
        - port: "{{ searchinside_elastic_port }}"
          protocol: TCP
          targetPort: "{{ searchinside_elastic_port }}"
      selector:
        deployment-config.name: search-inside-elastic

- name: Kibana - Deployment Config
  openshift:
    apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: search-inside-kibana
      namespace: "{{ openshift_namespace }}"
    spec:
      replicas: 1
      selector:
        deployment-config.name: search-inside-kibana
      template:
        metadata:
          creationTimestamp: null
          labels:
            deployment-config.name: search-inside-kibana
        spec:
          containers:
            - env:
              - name: 'ELASTICSEARCH_URL'
                value: 'http://search-inside-elastic.{{ openshift_namespace }}.svc:9200'
              - name: 'ELASTICSEARCH_HOSTS'
                value: 'http://search-inside-elastic.{{ openshift_namespace }}.svc:9200'
              image: 'docker-registry.default.svc:5000/{{ openshift_namespace }}/search-inside-kibana:latest'
              imagePullPolicy: Always
              name: search-inside-kibana
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - search-inside-kibana
            from:
              kind: ImageStreamTag
              name: 'search-inside-kibana:latest'
              namespace: "{{ openshift_namespace }}"

- name: Kibana - Service
  openshift:
    state: latest
    apiVersion: v1
    kind: Service
    metadata:
      name: "{{ searchinside_kibana_servicename }}"
      namespace: "{{ openshift_namespace }}"
    spec:
      type: ClusterIP
      ports:
        - port: "{{ searchinside_kibana_port }}"
          protocol: TCP
          targetPort: "{{ searchinside_kibana_port }}"
      selector:
        deployment-config.name: search-inside-kibana

- name: "Pull {{ nodejs_base_image_mirrored_from }} into {{ nodejs_base_image_mirrored_to }}"
  when: >-
    openshift_namespace == "wwp-test"
  delegate_to: localhost
  openshift_imagestream:
    metadata:
      name: "{{ nodejs_base_image_name }}"
      namespace: "{{ openshift_namespace }}"
    from: "{{ nodejs_base_image_mirrored_from }}"
    tag: "{{ nodejs_base_image_tag }}"

- name: NodeJS backend - Image Stream
  when: >-
    openshift_namespace == "wwp-test"
  openshift_imagestream:
    state: latest
    metadata:
      namespace: "{{ openshift_namespace }}"
      name: search-inside-nodejsb
    git:
      repository: "{{ searchinside_git_uri }}"
      path: docker_nodejsb
  register: _openshift_image_search_inside_nodejsb

- name: NodeJS backend - Rebuild image
  when:
    - >
      ( (_openshift_image_search_inside_nodejsb | default({})) is changed )
      or
      "nodejsb.rebuild" in ansible_run_tags
    - >-
      openshift_namespace == "wwp-test"
  shell: "oc -n {{ openshift_namespace }} start-build --wait search-inside-nodejsb"
  delegate_to: localhost
  tags:
    - nodejsb.rebuild

- name: NodeJS backend - Deployment Config
  openshift:
    apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: search-inside-nodejsb
      namespace: "{{ openshift_namespace }}"
    spec:
      replicas: 1
      selector:
        deployment-config.name: search-inside-nodejsb
      template:
        metadata:
          creationTimestamp: null
          labels:
            deployment-config.name: search-inside-nodejsb
        spec:
          containers:
            - env:
              - name: 'ELASTICSEARCH_URL'
                value: 'http://search-inside-elastic.{{ openshift_namespace }}.svc:9200'
              - name: 'ELASTICSEARCH_HOSTS'
                value: 'http://search-inside-elastic.{{ openshift_namespace }}.svc:9200'
              - name: 'RUNNING_HOST'
                value: "{{ openshift_namespace }}"
              image: 'docker-registry.default.svc:5000/{{ openshift_namespace }}/search-inside-nodejsb:latest'
              imagePullPolicy: Always
              name: search-inside-nodejsb
              resources: {}
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - search-inside-nodejsb
            from:
              kind: ImageStreamTag
              name: 'search-inside-nodejsb:latest'
              namespace: "{{ openshift_namespace }}"

- name: NodeJS backend - Service
  openshift:
    state: latest
    apiVersion: v1
    kind: Service
    metadata:
      name: "{{ searchinside_nodejsb_servicename }}"
      namespace: "{{ openshift_namespace }}"
    spec:
      type: ClusterIP
      ports:
        - port: "{{ searchinside_nodejsb_port }}"
          protocol: TCP
          targetPort: "{{ searchinside_nodejsb_port }}"
      selector:
        deployment-config.name: search-inside-nodejsb

- name: NodeJS frontend - Image Stream
  when: >-
    openshift_namespace == "wwp-test"
  openshift_imagestream:
    state: latest
    metadata:
      namespace: "{{ openshift_namespace }}"
      name: search-inside-nodejsf
    git:
      repository: "{{ searchinside_git_uri }}"
      path: docker_nodejsf
  register: _openshift_image_search_inside_nodejsf

- name: NodeJS frontend - Rebuild image
  when:
    - >
      ( (_openshift_image_search_inside_nodejsf | default({})) is changed )
      or
      "nodejsf.rebuild" in ansible_run_tags
    - >-
      openshift_namespace == "wwp-test"
  shell: "oc -n {{ openshift_namespace }} start-build --wait search-inside-nodejsf"
  delegate_to: localhost
  tags:
    - nodejsf.rebuild

- name: NodeJS frontend - Deployment Config
  openshift:
    apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: search-inside-nodejsf
      namespace: "{{ openshift_namespace }}"
    spec:
      replicas: 1
      selector:
        deployment-config.name: search-inside-nodejsf
      template:
        metadata:
          creationTimestamp: null
          labels:
            deployment-config.name: search-inside-nodejsf
        spec:
          containers:
            - env:
              - name: 'ELASTICSEARCH_URL'
                value: 'http://search-inside-elastic.{{ openshift_namespace }}.svc:9200'
              - name: 'ELASTICSEARCH_HOSTS'
                value: 'http://search-inside-elastic.{{ openshift_namespace }}.svc:9200'
              image: 'docker-registry.default.svc:5000/{{ openshift_namespace }}/search-inside-nodejsf:latest'
              imagePullPolicy: Always
              name: search-inside-nodejsf
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - search-inside-nodejsf
            from:
              kind: ImageStreamTag
              name: 'search-inside-nodejsf:latest'
              namespace: "{{ openshift_namespace }}"

- name: NodeJS frontend - Service
  openshift:
    state: latest
    apiVersion: v1
    kind: Service
    metadata:
      name: "{{ searchinside_nodejsf_servicename }}"
      namespace: "{{ openshift_namespace }}"
    spec:
      type: ClusterIP
      ports:
        - port: "{{ searchinside_nodejsf_port }}"
          protocol: TCP
          targetPort: "{{ searchinside_nodejsf_port }}"
      selector:
        deployment-config.name: search-inside-nodejsf
