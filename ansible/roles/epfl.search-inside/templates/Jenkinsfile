// We use the new-fangled "Declarative Pipeline" Jenkinsfile syntax
pipeline {

  // Here we say that this is a nightly build
  triggers {
    // See https://jenkins.io/doc/book/pipeline/syntax/#cron-syntax
    // Note: the time zone is GMT (add 1 or 2 hours to get European
    // time, depending on season)
    cron('H H(1-2) * * *')
  }

  // Here we express where we want the pipeline to execute.
  agent {
    kubernetes {
      // We run on this Jenkins cloud (the one that Camptocamp set up for us):
      cloud 'openshift'
      // Label must be unique across the OpenShift namespace; slave pods
      // will be named after it
      label 'jenkins-slave-wwp'
      inheritFrom 'jenkins-agent'
      // Ideally we would want to not have a nodeSelector at all, but
      // we can't
      // (https://github.com/jenkinsci/kubernetes-plugin/pull/790).
      // The next best thing is to stipulate a label that all nodes
      // have (here, for an OpenShift 3.11 cluster running on Linux):
      nodeSelector "beta.kubernetes.io/os=linux"
    }
  }

  stages{
    stage('Build') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              def bc = openshift.selector('bc/search-inside-elastic')
              bc.startBuild("--wait", "--follow")
            }
          }
        }
      }
      post {
        failure {
          script {
            // Send an email if the current pipeline run has a "failed" status (red in the UI)
            emailext subject: '$DEFAULT_SUBJECT',
              body: '$DEFAULT_CONTENT',
              from: 'noreply@epfl.ch',
              to: 'isas-fsd-search-inside@groupes.epfl.ch'
          }
        }
      }
    }
    stage('Tag') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              openshift.tag("wwp-test/search-inside-elastic:latest", "wwp/search-inside-elastic:prod")
            }
          }
        }
      }
    }
  }
}
